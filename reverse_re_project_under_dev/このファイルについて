
development-preparation というレポジトリの中にある「reverse...fail」というファイルがある.そこではオセロゲームの開発を行っていた.

しかし,開発をリセットすることにした.理由は,上記ファイルのなかに記載しています.

失敗を踏まえて,開発の際に意識することを書いておく.

1.実装する前に紙に方針を書き出して,論理を詰めること

2.機能を作るたびに,軽くテストをすること.サボるとどこでバグらせたのか分からなくなる.

3.どこまでやったのか,未来の自分に向けて丁寧に記録しておく.


2023 1/21
右端に白石を置いた際の石の色の変更アルゴリズムを作成しました.右,下,右斜め下への遷移アルゴリズムが完成した.バグも見当たらない.

2023 1/22 0:38
四隅に黒石を置いた際に,盤面の変更の可能性を探索するアルゴリズムの作成が終了した.テストも入念に行ったが,バグが見られなかった.
次は,最近接が5マスとなるような盤面の縁にあたる箇所に石を置いた際のアルゴリズムを作成する.

2023 1/22 15:16

プロトタイプ作成中

最新ファイルの「reverse_prototype_ver2」について

問題点:例えば,斜め左下への遷移を表す「Southwest」関数においては,line_number == 7 or row_number == 0 のどちらを先に満たす遷移であるのかは状況により異なる.
場合分けをし,どちらかを満たしたらループを止める必要がある.

また、白石を置いた際,遷移先が"WBBB"で終了だとバグる.
(今の段階では,盤面変更が叶う場合(白石が遷移先に存在する場合)と何もない場合にのみ対応している)
従って,line_number == 7 or row_number == 0 のどちらを先に満たし,かつ何も置かれていない状態と次の白石を確認できない状態に対しての場合分けが必要.(例は,白石を置いたが,遷移先がWBBBのような場合)

完成に向けて,追加でやることは以下です.

1.碁石を置いてはいけない場所に置いた場合に,やり直しをさせるための判定アルゴリズムの作成
2.勝負が付いたらどちらが勝ったのかを判定するアルゴリズムの作成


